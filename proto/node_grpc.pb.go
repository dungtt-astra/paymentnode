// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/node.proto

package paymentchannel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeClient interface {
	RequestOpenChannel(ctx context.Context, in *MsgReqOpenChannel, opts ...grpc.CallOption) (*MsgResOpenChannel, error)
	ConfirmOpenChannel(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error)
	//  rpc Register(MsgRegisterRequest) returns (MsgRegisterResponse) {};
	OpenStream(ctx context.Context, opts ...grpc.CallOption) (Node_OpenStreamClient, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) RequestOpenChannel(ctx context.Context, in *MsgReqOpenChannel, opts ...grpc.CallOption) (*MsgResOpenChannel, error) {
	out := new(MsgResOpenChannel)
	err := c.cc.Invoke(ctx, "/node.Node/RequestOpenChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ConfirmOpenChannel(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/node.Node/ConfirmOpenChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) OpenStream(ctx context.Context, opts ...grpc.CallOption) (Node_OpenStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Node_ServiceDesc.Streams[0], "/node.Node/OpenStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeOpenStreamClient{stream}
	return x, nil
}

type Node_OpenStreamClient interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ClientStream
}

type nodeOpenStreamClient struct {
	grpc.ClientStream
}

func (x *nodeOpenStreamClient) Send(m *Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeOpenStreamClient) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeServer is the server API for Node service.
// All implementations must embed UnimplementedNodeServer
// for forward compatibility
type NodeServer interface {
	RequestOpenChannel(context.Context, *MsgReqOpenChannel) (*MsgResOpenChannel, error)
	ConfirmOpenChannel(context.Context, *Msg) (*Msg, error)
	//  rpc Register(MsgRegisterRequest) returns (MsgRegisterResponse) {};
	OpenStream(Node_OpenStreamServer) error
	mustEmbedUnimplementedNodeServer()
}

// UnimplementedNodeServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (UnimplementedNodeServer) RequestOpenChannel(context.Context, *MsgReqOpenChannel) (*MsgResOpenChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestOpenChannel not implemented")
}
func (UnimplementedNodeServer) ConfirmOpenChannel(context.Context, *Msg) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmOpenChannel not implemented")
}
func (UnimplementedNodeServer) OpenStream(Node_OpenStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenStream not implemented")
}
func (UnimplementedNodeServer) mustEmbedUnimplementedNodeServer() {}

// UnsafeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServer will
// result in compilation errors.
type UnsafeNodeServer interface {
	mustEmbedUnimplementedNodeServer()
}

func RegisterNodeServer(s grpc.ServiceRegistrar, srv NodeServer) {
	s.RegisterService(&Node_ServiceDesc, srv)
}

func _Node_RequestOpenChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReqOpenChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RequestOpenChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Node/RequestOpenChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RequestOpenChannel(ctx, req.(*MsgReqOpenChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ConfirmOpenChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ConfirmOpenChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Node/ConfirmOpenChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ConfirmOpenChannel(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_OpenStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).OpenStream(&nodeOpenStreamServer{stream})
}

type Node_OpenStreamServer interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ServerStream
}

type nodeOpenStreamServer struct {
	grpc.ServerStream
}

func (x *nodeOpenStreamServer) Send(m *Msg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeOpenStreamServer) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Node_ServiceDesc is the grpc.ServiceDesc for Node service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Node_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestOpenChannel",
			Handler:    _Node_RequestOpenChannel_Handler,
		},
		{
			MethodName: "ConfirmOpenChannel",
			Handler:    _Node_ConfirmOpenChannel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenStream",
			Handler:       _Node_OpenStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/node.proto",
}
